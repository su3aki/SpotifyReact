[{"/Users/kiyo/spotifyreact/frontend/src/index.js":"1","/Users/kiyo/spotifyreact/frontend/src/App.js":"2","/Users/kiyo/spotifyreact/frontend/src/components/Search.js":"3","/Users/kiyo/spotifyreact/frontend/src/components/GetParams.js":"4","/Users/kiyo/spotifyreact/frontend/src/components/UseAudio.js":"5"},{"size":219,"mtime":1613760134278,"results":"6","hashOfConfig":"7"},{"size":3831,"mtime":1614752298216,"results":"8","hashOfConfig":"7"},{"size":2733,"mtime":1614754231566,"results":"9","hashOfConfig":"7"},{"size":792,"mtime":1614738165260,"results":"10","hashOfConfig":"7"},{"size":1197,"mtime":1614754639805,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"n23bfk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/kiyo/spotifyreact/frontend/src/index.js",[],["28","29"],"/Users/kiyo/spotifyreact/frontend/src/App.js",["30","31"],"import React, { useState, useEffect } from 'react'\nimport axios from \"axios\"\nimport Search from './components/Search'\nimport Button from '@material-ui/core/Button'\nimport {\n  withStyles,\n  makeStyles\n} from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport './App.css'\n\nconst App = () => {\n  const [token, setToken] = useState(\"\")\n  const [resultWordSearch, setResultWordSearch] = useState({\n    artistsName: \"\",\n    artistsImg: \"\"\n  })\n  const [wordFormData, setWordFormData] = useState(\"\")\n  const [SearchFormData, setSearchFormData] = useState(\"\")\n  //アクセストークン取得\n  useEffect(() => {\n    axios(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        'Authorization':\n          \"Basic \" + btoa(process.env.REACT_APP_clientId + \":\" + process.env.REACT_APP_clientSecret)\n      },\n      data: \"grant_type=client_credentials\"\n    }).then((tokenResponse) => {\n      setToken(tokenResponse.data.access_token)\n      console.log(\n        \"アクセストークン：\"\n        + tokenResponse.data.access_token)\n    })\n  }, [])\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (wordFormData === \"\") {\n      alert(\"入力してください\");\n    }\n  }\n  //単語検索ボタンの機能\n  //SearchFormに入力された単語を元にアーティスト名を取得\n  const addSearchFormData = (event) => {\n    setResultWordSearch([])\n    event.preventDefault()\n    console.log('RUN WORD Search', event.target)\n    axios(`https://api.spotify.com/v1/search?q=${SearchFormData}&type=artist&limit=3`, {\n      method: \"GET\",\n      headers: {\n        'Authorization': \"Bearer \" + token\n      },\n    }).then((artistsResponse) => {\n      console.log(artistsResponse.data)\n      //検索結果を変数に登録\n      setResultWordSearch({\n        artistsName: artistsResponse.data.artists.items[0].name,\n        artistsImg: artistsResponse.data.artists.items[0].images[0].url\n      })\n      console.log(artistsResponse.data)\n    })\n    setSearchFormData('')\n  }\n  //Searchform中身の変更内容取得\n  const handleSearchFormChange = (event) => {\n    console.log(event.target.value)\n    setSearchFormData(event.target.value)\n  }\n\n\n  /*\n  const CssTextField = withStyles({\n    root: {\n      '& label.Mui-focused': {\n        color: 'green',\n      },\n      '& .MuiInput-underline:after': {\n        borderBottomColor: 'green',\n      }\n    }\n})(TextField);\n*/\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\n  const classes = useStyles()\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>シュッとしたアプリ名が<br/>ここに入る予定です</h2>\n        </div>\n        <form className={classes.root} noValidate onSubmit={handleSubmit}>\n          <TextField\n            className={classes.margin}\n            id=\"standard-basic\"\n            label=\"trackname?\"\n            value={wordFormData}\n            fullWidth\n            onChange={(e) => setWordFormData(e.target.value)}\n            />\n\n        </form>\n        {wordFormData.length === 0\n          ? <p>Fill the form</p>\n          : <Search token={token} wordFormData={wordFormData} />\n          }\n        <h1>Search Artists by query</h1>\n          <form onSubmit={addSearchFormData}>\n            <input\n              value={SearchFormData}\n              onChange={handleSearchFormChange}\n            />\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">GO!</Button>\n          </form>\n          <p>Artists Result:{resultWordSearch.artistsName}</p>\n          <img src={resultWordSearch.artistsImg}/>\n        </div>\n\n    )\n  }\nexport default App;\n","/Users/kiyo/spotifyreact/frontend/src/components/Search.js",["32","33","34"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport useAudio from './UseAudio'\nimport './Search.css'\nimport { Button } from '@material-ui/core'\n\nconst Search = (props) => {\n  // const [searchResult, setSearchResult] = useState({\n  //   trackId: \"\",\n  //   artistsName: \"\",\n  //   nameList: []\n  // })\n  const [itemResult, setItemResult] = useState([])\n  const [selectedTrack, setSelectedTrack] = useState({\n    trackURL: \"\"\n  })\n  useEffect(() => {\n    //曲名単語検索\n    axios(`https://api.spotify.com/v1/search?query=${props.wordFormData}&type=track&market=US&limit=10`, {\n      method: \"GET\",\n      headers: { Authorization: \"Bearer \" + props.token },\n    })\n      .then((trackContentsResponse) => {\n        // const tracksFilter = trackContentsResponse.data.tracks.items\n        setItemResult(trackContentsResponse.data.tracks.items)\n        console.log(\"🔻トラック検索結果：\" + props.wordFormData)\n        console.log(trackContentsResponse)\n      })\n      .catch((err) => {\n        console.log(\"err:\", err)\n      })\n  }, [props.wordFormData, props.token]\n  )\n  console.log(itemResult)\n  itemResult.length === 0\n    ? console.log(\"未取得\")\n    : console.log(itemResult[0].album.images[0].url)\n  const audioURL = \"https://p.scdn.co/mp3-preview/660f6707ddb0b91c3bd1deaac2585292e546634e?cid=d20198343b174396815682bbc04c4973\"\n  //オーディオのカスタムフック\n  const [playing, play, pause,] = useAudio(audioURL);\n  return (\n    <div>\n    <div className=\"tracks-header\">\n        <p>Tracklist</p>\n    </div>\n\n    <Button onClick={playing ? pause : play}>\n      {playing ? \"Pause\" : \"Play\"}\n    </Button>\n    <div className=\"tracks\">\n      { itemResult !== undefined\n        ? itemResult.length === 0\n          ? <p>そんな曲ないわ</p>\n          : <ul>\n            {itemResult.map((props) =>\n              <li\n                onClick\n                key={props.id}>\n                <img src={props.album.images[1].url} />\n                  <div className=\"tracks-info\">\n                    {props.name}<br/>\n                    {props.album.artists[0].name}\n                </div>\n              </li>\n            )}\n          </ul>\n        : <p>wait a minute</p>\n      }\n      {/* {searchResult.nameList.map((name) =>\n        <li>\n          {name}\n        </li>\n      // <div key={id}>\n      //   <p onClick={() => (<GetParams token={props.token} trackId={id} />)}/>\n      //   {name}        // </div>\n      )}\n      </ul>\n      <h3>Artist is called \"{searchResult.artistsName}\"</h3>\n      <p>ResultID: {searchResult.trackId}</p>\n      <GetParams token={props.token} trackId={searchResult.trackId} />\n       */}\n      </div>\n      </div>\n  )\n}\nexport default Search;\n","/Users/kiyo/spotifyreact/frontend/src/components/GetParams.js",["35"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst GetParams = (props) => {\n  const [trackParams, setTrackParams] = useState([])\n  useEffect(() => {\n//Searchで拾ってきたIDを元に曲のパラメータを取得\n    axios(`https://api.spotify.com/v1/tracks/${props.trackId}`, {\n      method: \"GET\",\n      headers: { Authorization: \"Bearer \" + props.token}\n    })\n      .then((trackParameterResponse) => {\n        setTrackParams({ trackParameterResponse })\n        console.log(\"🔻トラック詳細情報\")\n        console.log(trackParameterResponse)\n      })\n      .catch((err) => {\n        console.log(\"err\", err)\n      })\n  }, [props.trackId,props.token]\n  )\n  return (\n    <div>\n      <p>Parameter:{ }</p>\n    </div>\n  )\n}\nexport default GetParams;\n",["36","37"],"/Users/kiyo/spotifyreact/frontend/src/components/UseAudio.js",["38"],"import React from \"react\";\n\nconst useAudio = url => {\n  // create audio only once\n  const [audio] = React.useState(new Audio(url));\n\n  // same as React.Component.forceUpdate\n  const [, _forceUpdate] = React.useState(false);\n  const forceUpdate = () => _forceUpdate(prevState => !prevState);\n\n  React.useEffect(() => {\n    audio.play();\n    audio.addEventListener(\"play\", forceUpdate);\n    audio.addEventListener(\"pause\", forceUpdate);\n    audio.addEventListener(\"ended\", forceUpdate);\n    audio.addEventListener(\"timeupdate\", forceUpdate);\n\n    return () => {\n      audio.removeEventListener(\"play\", forceUpdate);\n      audio.removeEventListener(\"pause\", forceUpdate);\n      audio.removeEventListener(\"ended\", forceUpdate);\n      audio.addEventListener(\"timeupdate\", forceUpdate);\n    };\n\n    /**\n     * about useEffect's second argument\n     *    give nothing        => same as componentDidUpdate\n     *    give an empty array => same as componentWillMount\n     */\n  }, []);\n\n  const play = () => audio.play();\n  const pause = () => audio.pause();\n  const jump = value => (audio.currentTime += value);\n\n  return [!audio.paused, audio.currentTime, play, pause, jump];\n};\n\nexport default useAudio;\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":6,"column":3,"nodeType":"45","messageId":"46","endLine":6,"endColumn":13},{"ruleId":"47","severity":1,"message":"48","line":126,"column":11,"nodeType":"49","endLine":126,"endColumn":51},{"ruleId":"43","severity":1,"message":"50","line":14,"column":10,"nodeType":"45","messageId":"46","endLine":14,"endColumn":23},{"ruleId":"43","severity":1,"message":"51","line":14,"column":25,"nodeType":"45","messageId":"46","endLine":14,"endColumn":41},{"ruleId":"47","severity":1,"message":"48","line":59,"column":17,"nodeType":"49","endLine":59,"endColumn":56},{"ruleId":"43","severity":1,"message":"52","line":5,"column":10,"nodeType":"45","messageId":"46","endLine":5,"endColumn":21},{"ruleId":"39","replacedBy":"53"},{"ruleId":"41","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":30,"column":6,"nodeType":"57","endLine":30,"endColumn":8,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'withStyles' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'selectedTrack' is assigned a value but never used.","'setSelectedTrack' is assigned a value but never used.","'trackParams' is assigned a value but never used.",["59"],["60"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [audio]",{"range":"64","text":"65"},[971,973],"[audio]"]