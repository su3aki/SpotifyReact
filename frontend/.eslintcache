[{"/Users/kiyo/spotifyreact/frontend/src/index.js":"1","/Users/kiyo/spotifyreact/frontend/src/App.js":"2","/Users/kiyo/spotifyreact/frontend/src/components/Search.js":"3","/Users/kiyo/spotifyreact/frontend/src/components/GetParams.js":"4","/Users/kiyo/spotifyreact/frontend/src/components/UseAudio.js":"5"},{"size":219,"mtime":1613760134278,"results":"6","hashOfConfig":"7"},{"size":3532,"mtime":1614900625054,"results":"8","hashOfConfig":"7"},{"size":2202,"mtime":1614910781620,"results":"9","hashOfConfig":"7"},{"size":800,"mtime":1614910442243,"results":"10","hashOfConfig":"7"},{"size":1197,"mtime":1614754639805,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"n23bfk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"/Users/kiyo/spotifyreact/frontend/src/index.js",[],["26","27"],"/Users/kiyo/spotifyreact/frontend/src/App.js",["28"],"import React, { useState, useEffect } from 'react'\nimport axios from \"axios\"\nimport Search from './components/Search'\nimport Button from '@material-ui/core/Button'\nimport {\n  makeStyles\n} from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport './App.css'\n\nconst App = () => {\n  const [token, setToken] = useState(\"\")\n  const [resultWordSearch, setResultWordSearch] = useState({\n    artistsName: \"\",\n    artistsImg: \"\"\n  })\n  const [wordFormData, setWordFormData] = useState(\"\")\n  const [SearchFormData, setSearchFormData] = useState(\"\")\n  //アクセストークン取得\n  useEffect(() => {\n    axios(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        'Authorization':\n          \"Basic \" + btoa(process.env.REACT_APP_clientId + \":\" + process.env.REACT_APP_clientSecret)\n      },\n      data: \"grant_type=client_credentials\"\n    }).then((tokenResponse) => {\n      setToken(tokenResponse.data.access_token)\n      console.log(\n        \"アクセストークン：\"\n        + tokenResponse.data.access_token)\n    })\n  }, [])\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (wordFormData === \"\") {\n      alert(\"入力してください\");\n    }\n  }\n  //単語検索ボタンの機能\n  //SearchFormに入力された単語を元にアーティスト名を取得\n  const addSearchFormData = (event) => {\n    setResultWordSearch([])\n    event.preventDefault()\n    console.log('RUN WORD Search', event.target)\n    axios(`https://api.spotify.com/v1/search?q=${SearchFormData}&type=artist&limit=3`, {\n      method: \"GET\",\n      headers: {\n        'Authorization': \"Bearer \" + token\n      },\n    }).then((artistsResponse) => {\n      console.log(artistsResponse.data)\n      //検索結果を変数に登録\n      setResultWordSearch({\n        artistsName: artistsResponse.data.artists.items[0].name,\n        artistsImg: artistsResponse.data.artists.items[0].images[0].url\n      })\n      console.log(artistsResponse.data)\n    })\n    setSearchFormData('')\n  }\n  //Searchform中身の変更内容取得\n  const handleSearchFormChange = (event) => {\n    console.log(event.target.value)\n    setSearchFormData(event.target.value)\n  }\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\n  const classes = useStyles()\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Ronshex</h2>\n        </div>\n        <form className={classes.root} noValidate onSubmit={handleSubmit}>\n          <TextField\n            className={classes.margin}\n            id=\"standard-basic\"\n            label=\"trackname?\"\n            value={wordFormData}\n            fullWidth\n            onChange={(e) => setWordFormData(e.target.value)}\n            />\n\n        </form>\n        {wordFormData.length === 0\n          ? <p>Fill the form</p>\n          : <Search token={token} wordFormData={wordFormData} />\n          }\n        <h1>Search Artists by query</h1>\n          <form onSubmit={addSearchFormData}>\n            <input\n              value={SearchFormData}\n              onChange={handleSearchFormChange}\n            />\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">GO!</Button>\n          </form>\n          <p>Artists Result:{resultWordSearch.artistsName}</p>\n          <img src={resultWordSearch.artistsImg}/>\n        </div>\n\n    )\n  }\nexport default App;\n","/Users/kiyo/spotifyreact/frontend/src/components/Search.js",["29","30","31","32","33","34"],"/Users/kiyo/spotifyreact/frontend/src/components/GetParams.js",["35"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst GetParams = (props) => {\n  const [trackParams, setTrackParams] = useState([])\n  useEffect(() => {\n//Searchで拾ってきたIDを元に曲のパラメータを取得\n    axios(`https://api.spotify.com/v1/audio-analysis/${props.trackId}`, {\n      method: \"GET\",\n      headers: { Authorization: \"Bearer \" + props.token}\n    })\n      .then((trackParameterResponse) => {\n        setTrackParams({ trackParameterResponse })\n        console.log(\"🔻トラック詳細情報\")\n        console.log(trackParameterResponse)\n      })\n      .catch((err) => {\n        console.log(\"err\", err)\n      })\n  }, [props.trackId,props.token]\n  )\n  return (\n    <div>\n      <p>Parameter:{ }</p>\n    </div>\n  )\n}\nexport default GetParams;\n","/Users/kiyo/spotifyreact/frontend/src/components/UseAudio.js",["36"],"import React from \"react\";\n\nconst useAudio = url => {\n  // create audio only once\n  const [audio] = React.useState(new Audio(url));\n\n  // same as React.Component.forceUpdate\n  const [, _forceUpdate] = React.useState(false);\n  const forceUpdate = () => _forceUpdate(prevState => !prevState);\n\n  React.useEffect(() => {\n    audio.play();\n    audio.addEventListener(\"play\", forceUpdate);\n    audio.addEventListener(\"pause\", forceUpdate);\n    audio.addEventListener(\"ended\", forceUpdate);\n    audio.addEventListener(\"timeupdate\", forceUpdate);\n\n    return () => {\n      audio.removeEventListener(\"play\", forceUpdate);\n      audio.removeEventListener(\"pause\", forceUpdate);\n      audio.removeEventListener(\"ended\", forceUpdate);\n      audio.addEventListener(\"timeupdate\", forceUpdate);\n    };\n\n    /**\n     * about useEffect's second argument\n     *    give nothing        => same as componentDidUpdate\n     *    give an empty array => same as componentWillMount\n     */\n  }, []);\n\n  const play = () => audio.play();\n  const pause = () => audio.pause();\n  const jump = value => (audio.currentTime += value);\n\n  return [!audio.paused, audio.currentTime, play, pause, jump];\n};\n\nexport default useAudio;\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":110,"column":11,"nodeType":"43","endLine":110,"endColumn":51},{"ruleId":"44","severity":1,"message":"45","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":16},{"ruleId":"44","severity":1,"message":"48","line":5,"column":10,"nodeType":"46","messageId":"47","endLine":5,"endColumn":16},{"ruleId":"44","severity":1,"message":"49","line":6,"column":8,"nodeType":"46","messageId":"47","endLine":6,"endColumn":17},{"ruleId":"44","severity":1,"message":"50","line":10,"column":10,"nodeType":"46","messageId":"47","endLine":10,"endColumn":23},{"ruleId":"44","severity":1,"message":"51","line":10,"column":25,"nodeType":"46","messageId":"47","endLine":10,"endColumn":41},{"ruleId":"41","severity":1,"message":"42","line":55,"column":17,"nodeType":"43","endLine":55,"endColumn":56},{"ruleId":"44","severity":1,"message":"52","line":5,"column":10,"nodeType":"46","messageId":"47","endLine":5,"endColumn":21},{"ruleId":"53","severity":1,"message":"54","line":30,"column":6,"nodeType":"55","endLine":30,"endColumn":8,"suggestions":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useAudio' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'GetParams' is defined but never used.","'selectedTrack' is assigned a value but never used.","'setSelectedTrack' is assigned a value but never used.","'trackParams' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.","ArrayExpression",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [audio]",{"range":"62","text":"63"},[971,973],"[audio]"]